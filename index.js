/**
 * Created by savely on 10.05.2017.
 */
global.request = require('request-promise-native');
// –ü–∞—Ä—Å–µ—Ä HTML –ø–æ —Ç–∏–ø—É jQuery
global.cheerio = require('cheerio');
// –õ–∏–±–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ZIP-–∞—Ä—Ö–∏–≤–æ–≤
global.archiver = require('archiver');
// –ü–∞—Ç—á –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π condole, —Ä–∞—Å—à–∏—Ä—è—é—â–∏–π –µ—ë —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.
require('console-stamp')(console, { pattern: 'HH:MM:ss.l'});

// –ö–æ–Ω—Ñ–∏–≥ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º
global.config = require('./config');
global.parse_html = {parse_mode:'HTML'};
const keyboard = {
	parse_mode: 'HTML',
	reply_markup: {
		keyboard: [
			[{text: '–°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤'}, {text: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'}],
			[{text: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'}, {text: '–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'}],
			[{text: 'üîç–ü–æ–∏—Å–∫'}, {text: '‚ÑπÔ∏è–ü–æ–º–æ—â—å'}]
		]
	}
};

// –õ–∏–±–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¢–µ–ª–µ–≥—Ä–∞–º–æ–º
const TelegramBot = require('node-telegram-bot-api');
global.bot = new TelegramBot(config.private.token, config.private.bot);

// –î—Ä–∞–π–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö RethinkDB
global.r = require('rethinkdbdash')({
	db: 'lostfilm',
	servers: [
		{host: '192.168.1.2', port: 28015}
	]
});
// –õ–∏–±–∞ –ø–æ —Ç–∏–ø—É Underscore –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
global.R = require('ramda');

// –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
require('./list')();
require('./push')();

const parseTorrent = require('parse-torrent');

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç ID –∏–∑ string –≤ int –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –ë–î
 * @param body
 * @returns {Array}
 */
global.fixId = function fixId(body) {
	let temp = [];
	for (let i in body.data)
		if (body.data.hasOwnProperty(i))
			temp.push({
				alias: body.data[i].alias,
				channels: body.data[i].channels,
				date: body.data[i].date,
				genres: body.data[i].genres,
				has_icon: body.data[i].has_icon,
				has_image: body.data[i].has_image,
				id: parseInt(body.data[i].id),
				img: body.data[i].img,
				link: body.data[i].link,
				not_favorited: body.data[i].not_favorited,
				rating: body.data[i].rating,
				status: body.data[i].status,
				status_5: body.data[i].status_5,
				status_auto: body.data[i].status_auto,
				status_auto_: body.data[i].status_auto_,
				status_season: body.data[i].status_season,
				title: body.data[i].title,
				title_orig: body.data[i].title_orig
			});
	return temp;
};

bot.onText(/^\/start/, function (msg) {
	bot.sendMessage(msg.chat.id, '–ñ–º–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.', keyboard);
});

bot.onText(/^\/help|^‚ÑπÔ∏è–ü–æ–º–æ—â—å/, function (msg) {
	bot.sendMessage(msg.chat.id,
		'<b>LostFilm.TV Bot 1.1Œ≤</b> by @kraso\n\n' +
		'<b>–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
		'/start - –ï—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∞ —É–¥–æ–±–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬Ø\\_(„ÉÑ)_/¬Ø\n' +
		'/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n' +
		'/list - –°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É\n' +
		'/mylist - –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤\n' +
		'/schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π\n' +
		'/myschedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö\n' +
		'/search - –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –æ–∑–≤—É—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤\n\n' +
		'<b>–†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å –∫–æ–¥–æ–º:</b>\n' +
		'<code>/about</code> - –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞\n' +
		'<code>/full</code> - –í—Å–µ —Å–µ–∑–æ–Ω—ã –∏ —Å–µ—Ä–∏–∏ —Å–µ—Ä–∏–∞–ª–∞\n' +
		'<code>/fav</code> - –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏–∞–ª –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ\n' +
		'<code>/dl</code> - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–∏—é/—Å–µ–∑–æ–Ω\n' +
		'<code>/mark</code> - –û—Ç–º–µ—Ç–∏—Ç—å —Å–µ—Ä–∏—é/—Å–µ–∑–æ–Ω (–Ω–µ)–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π\n\n' +
		'<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n' +
		'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é torrent-—Ñ–∞–π–ª—ã, ' +
		'–ø–æ—ç—Ç–æ–º—É –≤—Å–µ —Ç—Ä–∏ —Ç–∏–ø–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —É–ø–∞–∫–æ–≤–∞–Ω—ã –≤ –æ–¥–∏–Ω ZIP-–∞—Ä—Ö–∏–≤.', parse_html);
});

// –õ–æ–≥–∏–Ω–∏—Ç –Ω–∞—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
bot.onText(/^\/login/, function (msg) {
	bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:', {reply_markup: {force_reply: true}})
		.then(function (res) {
			return new Promise(function (resolve) {
				bot.onReplyToMessage(msg.chat.id, res.message_id, function (login) {
					resolve(login.text);
				});
			});
		})

		.then(function (res) {
			return Promise.all([
				res,
				bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', {reply_markup: {force_reply: true}})
			]);
		})

		.then(function (res) {
			return new Promise(function (resolve) {
				bot.onReplyToMessage(msg.chat.id, res[1].message_id, function (pass) {
					resolve([res[0], pass.text])
				});
			});
		})

		.then(function (res) {
			const options = {
				url: 'https://lostfilm.tv/ajaxik.php',
				formData: {
					act: 'users',
					type: 'login',
					mail: res[0],
					pass: res[1],
					rem: '1'
				},
				resolveWithFullResponse: true
			};

			return request.post(options);
		})

		.then(function (res) {
			const body = JSON.parse(res.body);
			if (res.headers.hasOwnProperty('set-cookie'))
				return {
					body: body,
					// –í—ã–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –Ω–∞–º –ø–æ—Å–ª–µ–¥–Ω—é—é (!) –∫—É–∫—É
					cookie: res.headers['set-cookie'].slice(-1)[0]
				};
			else
				throw new Error('Incorrect login or password!');
		})

		.then(function (res) {
			if (res.body.success && res.body.success === true)
				return r.table('users')
					.insert({
						id: msg.from.id,
						cookie: res.cookie
					}, {conflict: 'update'});
			else
				throw new Error('Lostfilm answered strange response on login attempt!');
		})

		.then(function (res) {
			console.log(res);
			bot.sendMessage(msg.chat.id, '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ!', keyboard);
		})

		.catch(function (error) {
			console.warn(error.message);
			bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', keyboard);
		});
});

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ñ–∞–π–ª–æ–≤ –∏ —É–ø–∞–∫–æ–≤–∫–∏ –∏—Ö –≤ zip-–∞—Ä—Ö–∏–≤.
 * –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä torrentOnly –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π
 * –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞. –ë–µ—Ä–µ—Ç –Ω—É–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ.
 * @param from_id
 * @param serial
 * @param season
 * @param episode
 * @param torrentOnly
 * @returns {Promise}
 */
global.download = function(from_id, serial, season, episode, torrentOnly) {
	// –§–ª–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞.
	// –¢—Ä–µ–±—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞, –∞ –Ω–µ –∞—Ä—Ö–∏–≤–∞.
	if (torrentOnly === undefined)
		torrentOnly = false;

	return new Promise(function (resolve, reject) {
		r.table('users')
			.get(from_id)

			.then(function (res) {
				if (res !== null && res.cookie !== undefined) {
					return res;
				} else
					throw new Error('[/dl] User not authorized!');
			})

			.then(function (res) {
				const j = request.jar();
				const cookie = request.cookie(res.cookie);
				const url = 'https://www.lostfilm.tv';
				j.setCookie(cookie, url);

				// –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –Ω–µ–∫—É—é –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É LostFilm
				// –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: c, s, e (—Å–µ—Ä–∏–∞–ª, —Å–µ–∑–æ–Ω, —ç–ø–∏–∑–æ–¥)
				// –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ—Ç–≤–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é
				const options = {
					url: 'https://lostfilm.tv/v_search.php',
					jar: j,
					qs: {c: serial, s: season, e: episode},
					transform: function (body) {
						return cheerio.load(body);
					}
				};

				return request.get(options);
			})

			.then(function ($) {
				const options = {
					url: $('body > a').attr('href'),
					transform: function (body) {
						return cheerio.load(body);
					}
				};

				return request.get(options);
			})

			.then(function ($) {
				// –í –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –Ω–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è usess-–∫–æ–¥, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –≤–Ω–∏–∑—É
				// –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã retre.org, –ø–æ—ç—Ç–æ–º—É –ø–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É "–Ω–∞ –≤—Å—è–∫–∏–π"
				const usess = /- (.+) ;/.exec($('.footer-banner.left > a').attr('title'))[1];
				r.table('users')
					.get(from_id)
					.update({
						usess: usess
					});

				const item = $('.inner-box--item');

				if (item.is('.inner-box--item')) {
					// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ file, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
					let files = [];
					item
						.each(function () {
							//const quality = $(this).children('.inner-box--label').text().trim();
							const options = {
								url: $('.inner-box--link.main > a', this).attr('href'),
								encoding: null
							};

							files.push(request.get(options));
						});

					return Promise.all(files);
				} else
					throw new Error('Incorrect codes for download!');
			})

			.then(function (res) {
				// –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ ZIP
				let archive = archiver('zip', {
					zlib: { level: 9 }
				});

				let text = '<b>–ú–∞–≥–Ω–µ—Ç-—Å—Å—ã–ª–∫–∏:</b>\n\n';
				for (let i in res) {
					if (res.hasOwnProperty(i)) {
						const buffer = Buffer.from(res[i], 'utf8');
						const torrent = parseTorrent(buffer);

						text += ('<b>' + torrent.name + '</b>\n<code>' + parseTorrent.toMagnetURI({
							name: torrent.name,
							infoHash: torrent.infoHash,
							announce: torrent.announce
						}) + '</code>\n\n');

						// –ß–µ–∫–∞–µ–º –Ω–∞—à —Ñ–ª–∞–≥ –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞
						if (torrentOnly === true && config.private.download) {
							const re = new RegExp(config.private.download.quality);

							// –†–µ–≥—É–ª—è—Ä–∫–æ–π —á–µ–∫–∞–µ–º, –∫–∞–∫–æ–π –Ω–∞–º –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–¥–∞—Ç—å –≤ –ø—Ä–æ–º–∞–π–∑
							if (re.exec(torrent.name))
								resolve({
									magnet: text,
									filename: `${torrent.name}.torrent`,
									buffer: buffer
								});
						}

						archive.append(buffer, {name: `${torrent.name}.torrent`});
					}
				}

				// –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–º–ø–æ–Ω–æ–≤–∫—É –∞—Ä—Ö–∏–≤–∞
				archive.finalize();

				// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ temp –¥–ª—è –±—É–¥—É—â–µ–≥–æ Buffer
				let temp = [];
				archive.on('data', function (chunk) {
					// –°—Ç—Ä–∏–º–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞ –ø–∞—á–∫–∞–º–∏ chunk –≤ temp
					temp.push(chunk);
				});

				archive.on('error', function (error) {
					throw new Error(error);
				});

				// –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å—Ç—Ä–∏–º–∞ —Å–æ–±–∏—Ä–∞–µ–º Buffer
				archive.on('end', function () {
					const buffer = Buffer.concat(temp);
					r.table('serials')
						.get(serial)

						.then(function(res) {
							let filename = '';
							if (episode === 999)
								filename = `${res.alias}_S${season}.zip`;
							else
								filename = `${res.alias}_S${season}E${episode}.zip`;

							resolve({
								magnet: text,
								filename: filename,
								buffer: buffer
							});
						})

						.catch(function (error) {
							throw new Error(error);
						})
				});
			})

			.catch(function (error) {
				reject(error);
			});
	});
};

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –Ω–∞–º —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ñ–∞–π–ª—ã –∏ –ø–∞–∫—É–µ—Ç –∏—Ö –≤ ZIP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥—Ä–µ—Å–∞—Ç—É.
bot.onText(/^\/dl_(\d+)_(\d+)_(\d+)|^\/dl_(\d+)_(\d+)/, function (msg, match) {
	let serial, season, episode;
	if (match[3] !== undefined) {
		serial = parseInt(match[1]);
		season = parseInt(match[2]);
		episode = parseInt(match[3]);
	} else {
		serial = parseInt(match[4]);
		season = parseInt(match[5]);
		episode = 999;
	}

	download(msg.from.id, serial, season, episode)
		.then(async function (res) {
			await bot.sendMessage(msg.chat.id, res.magnet, parse_html);
			await bot.sendDocument(msg.chat.id, res.buffer, {}, res.filename);
		})

		.catch(function (error) {
			console.warn(error.message);
		})
});

// –û—Ç–º–µ—á–∞–µ—Ç —Å–µ—Ä–∏—é –∏–ª–∏ —Å–µ–∑–æ–Ω, –∫–∞–∫ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π (–∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç) —á–µ—Ä–µ–∑ API Lostfilm.
bot.onText(/^\/mark_(\d+)_(\d+)_(\d+)|^\/mark_(\d+)_(\d+)/, function (msg, match) {
	let formData;
	if (match[3] !== undefined)
		formData = {
			act: 'serial',
			type: 'markepisode',
			val: `${match[1]}-${match[2]}-${match[3]}`
		};
	else
		formData = {
			act: 'serial',
			type: 'markseason',
			val: `${match[4]}-${match[5]}`
		};

	r.table('users')
		.get(msg.from.id)

		.then(function (res) {
			if (res !== null && res.cookie !== undefined) {
				return res;
			}
			else {
				bot.sendMessage(msg.chat.id, '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å! /login');
				throw new Error('[/mark] User not authorized!');
			}
		})

		.then(function (res) {
			const j = request.jar();
			const cookie = request.cookie(res.cookie);
			const url = 'https://www.lostfilm.tv';
			j.setCookie(cookie, url);

			const options = {
				url: 'https://lostfilm.tv/ajaxik.php',
				jar: j,
				formData: formData,
				json: true
			};

			return request.post(options);
		})

		.then(function (res) {
			if (res.result === 'on')
				bot.sendMessage(msg.chat.id, '–°–µ—Ä–∏—è/—Å–µ–∑–æ–Ω –æ—Ç–º–µ—á–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º!');

			if (res.result === 'off')
				bot.sendMessage(msg.chat.id, '–°–µ—Ä–∏—è/—Å–µ–∑–æ–Ω –æ—Ç–º–µ—á–µ–Ω –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º!')
		})

		.catch(function (error) {
			console.warn(error.message);
			bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...');
		});
});

// –û—Ç–º–µ—á–∞–µ—Ç —Å–µ—Ä–∏–∞–ª –∫–∞–∫ –ò–∑–±—Ä–∞–Ω–Ω—ã–π (–∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç) —á–µ—Ä–µ–∑ API Lostfilm.
bot.onText(/^\/fav_(\d+)/, function (msg, match) {
	r.table('users')
		.get(msg.from.id)

		.then(function (res) {
			if (res !== null && res.cookie !== undefined) {
				return res;
			} else {
				bot.sendMessage(msg.chat.id, '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å! /login');
				throw new Error('[/fav] User not authorized!');
			}
		})

		.then(function (res) {
			const j = request.jar();
			const cookie = request.cookie(res.cookie);
			const url = 'https://www.lostfilm.tv';
			j.setCookie(cookie, url);

			const options = {
				method: 'POST',
				url: 'https://lostfilm.tv/ajaxik.php',
				jar: j,
				formData: {
					act: 'serial',
					type: 'follow',
					id: parseInt(match[1])
				},
				json: true
			};

			return request.post(options);
		})

		.then(function (res) {
			if (res.result === 'on')
				bot.sendMessage(msg.chat.id, '–°–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');

			if (res.result === 'off')
				bot.sendMessage(msg.chat.id, '–°–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!');
		})

		.catch(function (error) {
			console.warn(error.message);
			bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...');
		});
});

// –°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ –≤ –±–∞–∑–µ.
// –ü–æ –∏–¥–µ–µ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
bot.onText(/^\/update/, async function () {
	let flag = true;
	let cycle = 0;
	do {
		const options = {
			method: 'POST',
			url: 'https://lostfilm.tv/ajaxik.php',
			formData: {
				act: 'serial',
				type: 'search',
				o: cycle * 10,
				s: 3,
				t: 0
			},
			json: true
		};

		cycle++;

		const part = new Promise(function (resolve, reject) {
			request.post(options)
				.then(function (body) {
					if (body.data.length < 10)
						flag = false;

					body = fixId(body);

					return r.table('serials')
						.insert(body, {conflict: 'update'});
				})

				.then(function (res) {
					resolve(res)
				})

				.catch(function (error) {
					reject(error);
				});
			});

		console.log(await part);
	} while (flag);
});

bot.onText(/^\/search|üîç–ü–æ–∏—Å–∫/, function (msg) {
    /**
	 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
     * @param type
     * @param text
     * @returns {Promise}
     */
	function dbRequest(type, text) {
		if (type === 'cyrillic')
			type = 'title';
		else if (type === 'latin')
			type = 'title_orig';

		return r.table('serials').orderBy(type)
			.filter(function (serials) {
				return serials(type).match('(?i)' + text);
			}).limit(10);
	}


	bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ.',
		{reply_markup: {force_reply: true}})

		.then(function (res) {
			return new Promise(function (resolve) {
				bot.onReplyToMessage(res.chat.id, res.message_id, function (res) {
					resolve(res);
				});
			});
		})

		.then(function (res) {
			return r.branch(
				r.expr(res.text).match("\\p{Latin}+").ne(null),
				dbRequest('latin', res.text),
				dbRequest('cyrillic', res.text)
			);
		})

		.then(function (res) {
			let text = `–ù–∞–π–¥–µ–Ω–æ: <b>${res.length} —Å–æ–≤–ø.</b>\n\n`;
			for (let i in res) {
				if (res.hasOwnProperty(i))
					text += `${res[i].title} (${res[i].title_orig})\n/about_${res[i].id} /full_${res[i].id} /fav_${res[i].id}\n\n`;
			}

			bot.sendMessage(msg.chat.id, text, keyboard);
		})

		.catch(function (error) {
			console.warn(error.message);
			bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', keyboard);
		});
});

/**
 * –ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ $, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç cheerio.
 * –ù–∞ –≤—ã—Ö–æ–¥–µ –≥–æ—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤.
 * @param $
 * @returns {Array}
 */
function parseSchedule($) {
	const table = $('tbody > tr');

	let result = [];
	let count = 0;
	table
		.each(function (i, elem) {
			if ($('th', elem).is('th')) {
				result[count] = [];
				result[count].push($('th', elem).text());
				count++;
			}

			let block = [];
			if ($('td', elem).is('td')) {
				const temp = $('td', elem).text().replace(/\t/g, '').replace(/\r/g, '').split('\n');
				for (let i in temp) {
					if (temp.hasOwnProperty(i) && temp[i] !== '')
						block.push(temp[i]);
				}
			}

			if (block.length > 0)
				result[count - 1].push(block);
		});

	return result;
}

bot.onText(/^\/schedule|^\/myschedule|^–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ|^–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/, function (msg, match) {
	let base_url = '';
	if (match[0] === '/myschedule' || match[0] === '–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
		base_url = 'https://www.lostfilm.tv/schedule/my_1/date_ru';
	else if (match[0] === '/schedule' || match[0] === '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
		base_url = 'https://www.lostfilm.tv/schedule/my_0/date_ru';

	r.table('users')
		.get(msg.from.id)

		.then(function (res) {
			if (res !== null && res.cookie !== undefined) {
				return res;
			} else {
				bot.sendMessage(msg.chat.id, '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å! /login');
				throw new Error('[/schedule] User not authorized!');
			}
		})

		.then(function (res) {
			const j = request.jar();
			const cookie = request.cookie(res.cookie);
			const url = 'https://www.lostfilm.tv';
			j.setCookie(cookie, url);

			const options = {
				url: base_url,
				jar: j,
				transform: function (body) {
					return cheerio.load(body)
				}
			};

			return request.get(options);
		})

		.then(async function ($) {
			const result = parseSchedule($);

			let text = '';
			for (let i in result) {
				if (result.hasOwnProperty(i)) {
					const caption = result[i][0].replace(/[–∞-—è–ê-–Ø0-9]/g, function (letter) {
						return letter.toUpperCase();
					});

					text += `\n<b>${caption}</b>\n\n`;
					for (let j = 1; j < result[i].length; j++) {
						const temp = {
							title: result[i][j][0],
							title_orig: result[i][j][1],
							num: result[i][j][2],
							howLong: result[i][j][5],
							date: result[i][j][4]
						};

						try {
							const serial = await r.table('serials')
								.filter({'title_orig': temp.title_orig}).nth(0);

							text += `${temp.title} (${temp.title_orig})\n${temp.num} ${temp.howLong} <i>(${temp.date})</i>\n/about_${serial.id} /full_${serial.id}\n\n`
						} catch (error) {
							throw new Error(error);
						}
					}
				}
			}

			return bot.sendMessage(msg.chat.id, text, parse_html);
		})

		.then(function (res) {
			console.log(res);
		})

		.catch(function (error) {
			console.warn(error.message);
			bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...');
		})
});

bot.onText(/^\/donate/, function (msg) {
	bot.sendMessage(msg.chat.id, "–ù–µ–±–æ–ª—å—à—É—é —Å—É–º–º—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –º–æ–∂–Ω–æ –ø–æ–¥–∫–∏–Ω—É—Ç—å <a href='https://krasovsky.me/bots'>–∑–¥–µ—Å—å</a>.", {parse_mode: 'HTML'});
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –±–æ—Ç–æ–º.
bot.on('message', function (msg) {
	console.log(msg);
});
